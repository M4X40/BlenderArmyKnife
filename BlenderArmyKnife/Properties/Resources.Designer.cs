//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlenderArmyKnife.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BlenderArmyKnife.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Asset_1 {
            get {
                object obj = ResourceManager.GetObject("Asset_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import bpy
        ///
        ///# Get the active node
        ///active_node = bpy.context.active_object.active_material.node_tree.nodes.active
        ///
        ///# Check if a node is selected
        ///if active_node is not None:
        ///    # Print the type of the selected node
        ///    print(&quot;Selected Node Type:&quot;, str(type(active_node)))
        ///else:
        ///    print(&quot;No node selected&quot;)
        ///
        ///&apos;&apos;&apos;
        ///Selected Node Type: &lt;class &apos;bpy.types.ShaderNodeGroup&apos;&gt;
        ///&apos;&apos;&apos;.
        /// </summary>
        internal static string FindNodeType {
            get {
                return ResourceManager.GetString("FindNodeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import bpy
        ///import os
        ///
        ///findMaterial = &quot;Wall-Tiles&quot;
        ///replaceMaterial = &quot;Wall-Tiles-Red&quot;
        ///SelectAllObjects = False # False for only objects you select, True for all objects in scene
        ///FindMode = &quot;Whitelist&quot; # Can be Whitelist or Blacklist depending on needs, disregard if above is True.
        ///
        ///
        ///# DO NOT CHANGE ANYTHING BEYOND THIS LINE #
        ///
        ///canRun = True
        ///
        ///if SelectAllObjects:
        ///    bpy.ops.object.select_all(action=&apos;SELECT&apos;)
        ///elif FindMode.lower() == &quot;blacklist&quot;:
        ///    BlacklistObj = []
        ///    for ob in bpy.context [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string findreplacematerial {
            get {
                return ResourceManager.GetString("findreplacematerial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import bpy
        ///
        ///Debug = False #Prints textures that dont get linked to a PBSDF, in the format &quot;mat | image&quot;
        ///
        ///# NOTE: THIS SCRIPT SKIPS MASKS #
        ///
        ///ORMTexNames = [
        ///    &quot;occlusionroughnessmetallic&quot;,
        ///    &quot;_orm&quot;,
        ///    &quot;hrm&quot;,
        ///    &quot;mtrao&quot;,
        ///    &quot;mrao&quot;,
        ///    &quot;hdr&quot;,
        ///    &quot;pack&quot;,
        ///    &quot;ocroughm&quot;,
        ///    &quot;ocroghm&quot;,
        ///    &quot;srm&quot;,
        ///    &quot;_or&quot;,
        ///    &quot;rma&quot;,
        ///    &quot;RoughnessAOMetallic&quot;,
        ///    &quot;MaskRougnessMetall&quot;
        ///]
        ///DiffuseTexNames = [
        ///    &quot;diffuse&quot;,
        ///    &quot;diff&quot;,
        ///    &quot;albedo&quot;,
        ///    &quot;alb&quot;,
        ///    &quot;basecolor&quot;,
        ///    &quot;bc&quot;,
        ///    &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GroupToPBSDF {
            get {
                return ResourceManager.GetString("GroupToPBSDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #  ╭─────────────────────────────────────────────────────────╮
        ///#  │                   UDump to Blender                      │
        ///#  │                                                         │
        ///#  │ M4X4#6494, zwei#0001 • github.com/M4X40/UModelToBlender │
        ///#  ╰─────────────────────────────────────────────────────────╯
        ///
        ///#  ╶─────────────────────────────────────────── #
        ///
        ///#  ╭──────────╮
        ///#  │ Settings │
        ///#  ╰──────────╯
        ///
        ///DumpDirectory = &apos;G:\\Blender\\GatorGames\\HWR\\HW-Maps\\Games\\VentRepair\\Ennard\\F [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string importer {
            get {
                return ResourceManager.GetString("importer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import bpy
        ///import os
        ///
        ///# Material Settings #
        ///EnableMats = True
        ///obName = &quot;ENV_MOD_FloorTile.mo&quot;
        ///numMaterials = 3
        ///mats = {
        ///0: &quot;Wall-Tiles&quot;
        ///}
        ///
        ///# UV Map Settings #
        ///EnableUV = False
        ///firstObj = &quot;ENV_MOD_Office_Wall.mo.017&quot; # Object that has desired UV Maps
        ///
        ///
        ///
        ///# DO NOT CHANGE ANYTHING BELOW THIS LINE #
        ///
        ///
        ///
        ///lastObj = &quot;none&quot;
        ///bpy.ops.object.select_all(action=&apos;SELECT&apos;)
        ///
        ///for ob in bpy.context.selected_objects:
        ///    if obName in ob.name:
        ///        if EnableMats:
        ///            currentMat = 0
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Mat_UV_Looping {
            get {
                return ResourceManager.GetString("Mat_UV_Looping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Octicons_mark_github_svg {
            get {
                object obj = ResourceManager.GetObject("Octicons_mark_github_svg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import bpy
        ///
        ///def FixMat(obj, matname, matobj):
        ///    try:
        ///        mater = bpy.data.materials.get(f&quot;{matname}&quot;.split(&quot;.00&quot;)[0])
        ///        print(mater)
        ///        if mater is not &quot;None&quot;:
        ///            if obj.data.materials:
        ///                matobj.material = mater
        ///            else:
        ///                print(f&quot;Appending {mater}&quot;)
        ///                obj.data.materials.append(mater)
        ///    except Exception as e:
        ///        print(f&quot;Could not find material {mater} | {e}&quot;)
        ///
        ///bpy.ops.object.select_all(action=&apos;SELECT&apos;)
        ///for ob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RemoveMaterialClones {
            get {
                return ResourceManager.GetString("RemoveMaterialClones", resourceCulture);
            }
        }
    }
}
