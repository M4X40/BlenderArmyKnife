import bpy

Debug = False #Prints textures that dont get linked to a PBSDF, in the format "mat | image"
DeleteGroup = True #Deletes the group node: recommended.

# NOTE: THIS SCRIPT SKIPS MASKS #

ORMTexNames = [
    "occlusionroughnessmetallic",
    "_orm",
    "hrm",
    "mtrao",
    "mrao",
    "hdr",
    "pack",
    "ocroughm",
    "ocroghm",
    "srm",
    "_or",
    "rma",
    "roughnessaometallic",
    "maskrougnessmetall",
    "_occ",
    "_occl",
    "_occlus",
    "occlusionroughnessmetallic_var2",
    "_ao_r_m_e" # dont ask me why this is here i just find these and put them in
    "_aoroughnessmetallic",
    "rgm"
]
DiffuseTexNames = [
    "diffuse",
    "diff",
    "albedo",
    "alb",
    "basecolor",
    "bc",
    "_d",
    "color",
    "prop",
    "prop4k",
    "basecolor__1_",
    "1_", # yes this is real
    "_a",
    "a_tga",
    "texture",
    "diffuse_skin0",
    "bco",
    "basecolor_low",
    "01",
    "05",
    "_diff_t",
    "_base",
    "_bas",
    "_baseco",
    "_basecolor_var2",
    "_basecolor2"
]
RoughTexNames = [
    "roughness",
    "rough",
    "_r",
    "roughness_skin0",
    "_gloss",
    "_gloss_t"
]
MetalTexNames = [
    "metalness",
    "metal",
    "metallic",
    "_m",
    "mt",
    "gloss"
]
EmissionTexNames = [
    "emission",
    "emissive",
    "_e",
    "emm"
]
NormalTexNames = [
    "normal",
    "nrm",
    "normal_tga",
    "norm",
    "_n",
    "normal_skin0",
    "nm",
    "_normal_t",
    "_nor",
    "_normal_var2"
]

def swap_links(mat, output, input):
    for link in output.links:
        mat.node_tree.links.remove(link)
    mat.node_tree.links.new(output, input)

print('\n\nstart\n\n')
MatsWithNoTex = []
OverlapTex = []
for mat in bpy.data.materials:
    skipmat = False
    if mat.node_tree is not None:
        try:
            bsdf = mat.node_tree.nodes.new(type='ShaderNodeBsdfPrincipled')
        except:
            continue
        input_color = bsdf.inputs.get('Base Color')
        input_norma = bsdf.inputs.get('Normal')
        input_metal = bsdf.inputs.get('Metallic')
        input_rough = bsdf.inputs.get('Roughness')
        input_emiss = bsdf.inputs.get('Emission')

        mat_output = mat.node_tree.nodes.get('Material Output')
        input_out = mat_output.inputs.get('Surface')

        existing_link = None
        for link in input_out.links:
            existing_link = link
            break
        if existing_link:
            mat.node_tree.links.remove(existing_link)

        mat.node_tree.links.new(bsdf.outputs['BSDF'], input_out)
        texnodefound = False
        for node in mat.node_tree.nodes:
            nodename = ((str(type(node))).split("<class \'")[1]).split("\'")[0]
            #print(f'Node: {nodename}')
            if ((str(type(node))).split("<class \'")[1]).split("\'")[0] == 'bpy.types.ShaderNodeGroup':
                #print(f"Found group for mat {(mat.name).split('.mat')[0]}")
                found_color = False
                found_norma = False
                found_metal = False
                found_rough = False
                found_emiss = False
                for input in node.inputs:
                    if input.is_linked:
                        for link in input.links:
                            connected_node = link.from_node
                            if ((str(type(connected_node))).split("<class \'")[1]).split("\'")[0] == 'bpy.types.ShaderNodeTexImage':
                                texnodefound = True
                                try:
                                    if not((connected_node.image.name).lower()).startswith("t_base"):
                                        output = connected_node.outputs.get('Color')
                                        for n in DiffuseTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_color:
                                                swap_links(mat, output, input_color)
                                                connected_node.image.colorspace_settings.name = "sRGB"
                                                found_color = True
                                                break
                                        for n in NormalTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_norma:
                                                nm = mat.node_tree.nodes.new("ShaderNodeNormalMap")
                                                input_normal = nm.inputs.get('Color')
                                                output_normal = nm.outputs.get('Normal')
                                                swap_links(mat, output, input_normal)
                                                mat.node_tree.links.new(output_normal, input_norma)
                                                connected_node.image.colorspace_settings.name = "Non-Color"
                                                found_norma = True
                                                break
                                        for n in MetalTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_metal:
                                                swap_links(mat, output, input_metal)
                                                connected_node.image.colorspace_settings.name = "Non-Color"
                                                found_metal = True
                                                break
                                        for n in RoughTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_rough:
                                                swap_links(mat, output, input_rough)
                                                connected_node.image.colorspace_settings.name = "Non-Color"
                                                found_rough = True
                                                break
                                        for n in ORMTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_rough and not found_metal:
                                                connected_node.image.colorspace_settings.name = "Non-Color"
                                                dupe_node = mat.node_tree.nodes.new(type='ShaderNodeTexImage')
                                                dupe_node.image = connected_node.image
                                                dupe_node.image.colorspace_settings.name = "Non-Color"
                                                swap_links(mat, output, input_metal)
                                                mat.node_tree.links.new(dupe_node.outputs.get('Color'), input_rough)
                                                found_rough = True
                                                found_metal = True
                                                if n == "_ao_r_m_e":
                                                    OverlapTex.append((connected_node.image.name).lower())
                                                break
                                        for n in EmissionTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and not found_emiss and not ((connected_node.image.name).lower() in OverlapTex):
                                                swap_links(mat, output, input_emiss)
                                                found_emiss = True
                                                break
                                except Exception as e:
                                    print(f"[Error] {e}")
                                    pass
                if Debug:
                    for input in node.inputs:
                        if input.is_linked:
                            for link in input.links:
                                connected_node = link.from_node
                                if ((str(type(connected_node))).split("<class \'")[1]).split("\'")[0] == 'bpy.types.ShaderNodeTexImage':
                                    if not "bonnie" in ((connected_node.image.name).lower()) and not ((connected_node.image.name).lower()).startswith("t_base") and not "mask" in (connected_node.image.name).lower():
                                        dontprint = False
                                        for n in DiffuseTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_color:
                                                dontprint = True
                                                break
                                        for n in NormalTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_norma:
                                                dontprint = True
                                                break
                                        for n in MetalTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_metal:
                                                dontprint = True
                                                break
                                        for n in RoughTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_rough:
                                                dontprint = True
                                                break
                                        for n in EmissionTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_emiss:
                                                dontprint = True
                                                break
                                        for n in ORMTexNames:
                                            if ((connected_node.image.name).lower()).endswith(n) and found_rough and found_metal:
                                                dontprint = True
                                                break
                                        if not dontprint:
                                            print(f"{mat.name} | {connected_node.image.name}")
                if DeleteGroup:
                    mat.node_tree.nodes.remove(node)
            elif not texnodefound and ((str(type(node))).split("<class \'")[1]).split("\'")[0] == 'bpy.types.ShaderNodeTexImage':
                texnodefound = True
        if not texnodefound:
            if not mat in MatsWithNoTex:
                print(f"Mat {(mat.name).split('.mat')[0]} has no Textures or has no links, skipping.")
                MatsWithNoTex.append(mat)
            continue
                
print(f'\n\nDone!\n\n')
